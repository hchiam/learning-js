{
  // Example global snippets. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  "Print to console": {
    "scope": "javascript,typescript",
    "prefix": "log",
    "body": ["console.log($1);"],
    "description": "Log output to console"
  },
  "Console Log": {
    "prefix": "console",
    "body": ["console.log($1);"],
    "description": "console.log"
  },
  "Pi": {
    "prefix": "pi",
    "body": [
      "3.141592653589793238462643383279502884197169399375105820974944592307816406"
    ],
    "description": "The first few digits of pi"
  },
  "alert": {
    "prefix": "alert",
    "body": ["alert(JSON.stringify($1));"],
    "description": "alert"
  },
  "alphabet": {
    "prefix": "abc",
    "body": ["abcdefghijklmnopqrstuvwxyz"],
    "description": "abc"
  },
  "numbers 0-9": {
    "prefix": "n0123",
    "body": ["0123456789"],
    "description": "numbers from 0 to 9"
  },
  "numbers 1-9 then 0": {
    "prefix": "n123",
    "body": ["1234567890"],
    "description": "numbers from 1 to 9 and then 0"
  },
  "it": {
    "prefix": "it",
    "body": ["it('$1', () => {\n  $2\n});"],
    "description": "it('...', () => {});"
  },
  "const": {
    "prefix": "const",
    "body": ["const $1 = $2;"],
    "description": "const declaration"
  },
  "let": {
    "prefix": "let",
    "body": ["let $1 = $2;"],
    "description": "let declaration"
  },
  "Arrow Function": {
    "scope": "javascript,typescript",
    "prefix": "arrowfun",
    "body": ["const $1 = ($2) => {\n\t$3\n};"],
    "description": "JS ES6 Arrow Function"
  },
  "iife": {
    "prefix": "iife",
    "body": [";(function(){})();"],
    "description": "IIFE"
  },
  "describe-test": {
    "prefix": "describe-test",
    "body": [
      "describe('${1:test}', () => {",
      " it('${2:works}', () => {",
      "   expect(${3:actual}).toBe(${4:expected});",
      " });",
      "});"
    ],
    "description": "Jasmine-style test setup"
  },
  "module.exports": {
    "prefix": "exports",
    "body": ["module.exports = {", "  ${1:function or variable},", "};"],
    "description": "module.exports"
  },
  "require": {
    "prefix": "require",
    "body": ["const {${1:what you're importing}} = require('./${2:file.js}');"],
    "description": "require"
  }
}
